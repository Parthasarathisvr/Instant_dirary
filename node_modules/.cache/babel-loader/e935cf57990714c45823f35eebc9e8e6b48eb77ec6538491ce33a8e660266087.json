{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\instant_diaries\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the AuthContext\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n\n// AuthProvider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null); // State for storing user info\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // State for managing login status\n\n  // Mock function to simulate user login (replace this with real login logic)\n  useEffect(() => {\n    // Simulating an admin user for testing purposes\n    setCurrentUser({\n      email: 'admininstan@gmail.com',\n      isAdmin: true\n    });\n    setIsLoggedIn(true); // Assuming user is logged in after setting currentUser\n  }, []);\n\n  // Function to handle login\n  const login = () => {\n    setIsLoggedIn(true);\n    // Add your logic to set the currentUser here\n    setCurrentUser({\n      email: 'admininstan@gmail.com',\n      isAdmin: true\n    }); // Example: Set an admin user\n  };\n\n  // Function to handle logout\n  const logout = () => {\n    setIsLoggedIn(false);\n    setCurrentUser(null); // Clear the user information on logout\n  };\n  const value = {\n    currentUser,\n    isLoggedIn,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}\n_s2(AuthProvider, \"x+OPg4jSUSsPSEOxo/ulTf9JOQM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","isLoggedIn","setIsLoggedIn","email","isAdmin","login","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/instant_diaries/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the AuthContext\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\n// AuthProvider component\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null); // State for storing user info\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);  // State for managing login status\r\n\r\n  // Mock function to simulate user login (replace this with real login logic)\r\n  useEffect(() => {\r\n    // Simulating an admin user for testing purposes\r\n    setCurrentUser({ email: 'admininstan@gmail.com', isAdmin: true });\r\n    setIsLoggedIn(true); // Assuming user is logged in after setting currentUser\r\n  }, []);\r\n\r\n  // Function to handle login\r\n  const login = () => {\r\n    setIsLoggedIn(true);\r\n    // Add your logic to set the currentUser here\r\n    setCurrentUser({ email: 'admininstan@gmail.com', isAdmin: true }); // Example: Set an admin user\r\n  };\r\n\r\n  // Function to handle logout\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setCurrentUser(null); // Clear the user information on logout\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    isLoggedIn,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC;;AAEA;AAAAE,EAAA,CAJgBD,OAAO;AAKvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd;IACAU,cAAc,CAAC;MAAEG,KAAK,EAAE,uBAAuB;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IACjEF,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,KAAK,GAAGA,CAAA,KAAM;IAClBH,aAAa,CAAC,IAAI,CAAC;IACnB;IACAF,cAAc,CAAC;MAAEG,KAAK,EAAE,uBAAuB;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;EACrE,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBJ,aAAa,CAAC,KAAK,CAAC;IACpBF,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,MAAMO,KAAK,GAAG;IACZR,WAAW;IACXE,UAAU;IACVI,KAAK;IACLC;EACF,CAAC;EAED,oBAAOd,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAV,QAAA,EAAEA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E;AAACd,GAAA,CAhCeF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}