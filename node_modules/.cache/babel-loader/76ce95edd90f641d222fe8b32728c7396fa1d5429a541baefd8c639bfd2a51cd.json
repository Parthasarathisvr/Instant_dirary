{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\instant_diaries\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create Provider Component\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [serverAvailable, setServerAvailable] = useState(true); // Track server availability\n\n  // Function to check if the server is available\n  const checkServerAvailability = async () => {\n    try {\n      const response = await fetch('/api/check'); // Replace with your server endpoint\n      if (response.ok) {\n        setServerAvailable(true);\n      } else {\n        setServerAvailable(false);\n      }\n    } catch {\n      setServerAvailable(false);\n    }\n  };\n  useEffect(() => {\n    // Check server availability periodically\n    const interval = setInterval(checkServerAvailability, 5000); // Check every 5 seconds\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []);\n  const login = () => {\n    if (serverAvailable) {\n      setIsLoggedIn(true);\n    }\n  };\n  const logout = () => {\n    if (serverAvailable) {\n      setIsLoggedIn(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout,\n      serverAvailable\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom Hook to use Auth Context\n_s(AuthProvider, \"GvyRX4aPeMDIAfOt8eG7uVAMxnU=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","serverAvailable","setServerAvailable","checkServerAvailability","response","fetch","ok","interval","setInterval","clearInterval","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/HP/instant_diaries/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create Context\r\nconst AuthContext = createContext();\r\n\r\n// Create Provider Component\r\nexport function AuthProvider({ children }) {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [serverAvailable, setServerAvailable] = useState(true); // Track server availability\r\n\r\n  // Function to check if the server is available\r\n  const checkServerAvailability = async () => {\r\n    try {\r\n      const response = await fetch('/api/check'); // Replace with your server endpoint\r\n      if (response.ok) {\r\n        setServerAvailable(true);\r\n      } else {\r\n        setServerAvailable(false);\r\n      }\r\n    } catch {\r\n      setServerAvailable(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check server availability periodically\r\n    const interval = setInterval(checkServerAvailability, 5000); // Check every 5 seconds\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, []);\r\n\r\n  const login = () => {\r\n    if (serverAvailable) {\r\n      setIsLoggedIn(true);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    if (serverAvailable) {\r\n      setIsLoggedIn(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout, serverAvailable }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom Hook to use Auth Context\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9D;EACA,MAAMa,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;MAC5C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACfJ,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLA,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC,CAAC,MAAM;MACNA,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,QAAQ,GAAGC,WAAW,CAACL,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC;IAC7D,OAAO,MAAMM,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAIT,eAAe,EAAE;MACnBD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EAED,MAAMW,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAIV,eAAe,EAAE;MACnBD,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,UAAU;MAAEW,KAAK;MAAEC,MAAM;MAAEV;IAAgB,CAAE;IAAAJ,QAAA,EACzEA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AAAAnB,EAAA,CA3CgBF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA4C5B,OAAO,SAASuB,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAO7B,UAAU,CAACI,WAAW,CAAC;AAChC;AAACyB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}