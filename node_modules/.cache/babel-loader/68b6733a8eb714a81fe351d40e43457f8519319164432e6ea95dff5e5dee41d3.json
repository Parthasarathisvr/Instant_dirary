{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\instant_diaries\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\n\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create Provider Component\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [clientOnlyMode, setClientOnlyMode] = useState(false);\n  useEffect(() => {\n    // Check for backend availability\n    const checkBackendConnection = async () => {\n      try {\n        // Attempt to fetch from backend (use a simple API endpoint or health check)\n        const response = await fetch('/api/health-check'); // Replace with actual endpoint\n        if (response.ok) {\n          // Backend is available\n          setClientOnlyMode(false);\n        } else {\n          // Backend not reachable\n          setClientOnlyMode(true);\n          setIsLoggedIn(true); // Assume logged in if client-only\n        }\n      } catch (error) {\n        // Fetch failed, likely due to no backend\n        setClientOnlyMode(true);\n        setIsLoggedIn(true); // Assume logged in if client-only\n      }\n    };\n    checkBackendConnection();\n  }, []);\n  const login = () => setIsLoggedIn(true);\n  const logout = () => {\n    setIsLoggedIn(false);\n    if (!clientOnlyMode) {\n      setClientOnlyMode(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      clientOnlyMode,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom Hook to use Auth Context\n_s(AuthProvider, \"iJhKFT5yR4vI1g9Jqvgy0VsXljk=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","clientOnlyMode","setClientOnlyMode","checkBackendConnection","response","fetch","ok","error","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/HP/instant_diaries/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\n\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create Context\r\nconst AuthContext = createContext();\r\n\r\n// Create Provider Component\r\nexport function AuthProvider({ children }) {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [clientOnlyMode, setClientOnlyMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check for backend availability\r\n    const checkBackendConnection = async () => {\r\n      try {\r\n        // Attempt to fetch from backend (use a simple API endpoint or health check)\r\n        const response = await fetch('/api/health-check'); // Replace with actual endpoint\r\n        if (response.ok) {\r\n          // Backend is available\r\n          setClientOnlyMode(false);\r\n        } else {\r\n          // Backend not reachable\r\n          setClientOnlyMode(true);\r\n          setIsLoggedIn(true); // Assume logged in if client-only\r\n        }\r\n      } catch (error) {\r\n        // Fetch failed, likely due to no backend\r\n        setClientOnlyMode(true);\r\n        setIsLoggedIn(true); // Assume logged in if client-only\r\n      }\r\n    };\r\n\r\n    checkBackendConnection();\r\n  }, []);\r\n\r\n  const login = () => setIsLoggedIn(true);\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    if (!clientOnlyMode) {\r\n      setClientOnlyMode(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, clientOnlyMode, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom Hook to use Auth Context\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3DE,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACnD,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf;UACAJ,iBAAiB,CAAC,KAAK,CAAC;QAC1B,CAAC,MAAM;UACL;UACAA,iBAAiB,CAAC,IAAI,CAAC;UACvBF,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACvB;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACd;QACAL,iBAAiB,CAAC,IAAI,CAAC;QACvBF,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACF,CAAC;IAEDG,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,KAAK,GAAGA,CAAA,KAAMR,aAAa,CAAC,IAAI,CAAC;EACvC,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnBT,aAAa,CAAC,KAAK,CAAC;IACpB,IAAI,CAACC,cAAc,EAAE;MACnBC,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,UAAU;MAAEE,cAAc;MAAEO,KAAK;MAAEC;IAAO,CAAE;IAAAZ,QAAA,EACxEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AAAAjB,EAAA,CA3CgBF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA4C5B,OAAO,SAASqB,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAO3B,UAAU,CAACI,WAAW,CAAC;AAChC;AAACuB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}